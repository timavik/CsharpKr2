1. Что такое Git? Для чего он используется?
Git — это распределенная система управления версиями (VCS), которая используется для отслеживания изменений в исходном коде, кооперативной разработки программного обеспечения и управления проектами. Он позволяет создавать ветки, объединять изменения, просматривать историю изменений и восстанавливать предыдущие версии файлов.

2. Что такое управляемый/неуправляемый код?
Управляемый код — это код, который выполняется под контролем среды выполнения CLR (Common Language Runtime) .NET. CLR предоставляет такие функции, как управление памятью через сборщик мусора, проверку типов и защиту безопасности.
Неуправляемый код — это код, который выполняется вне CLR, например, на нативных платформах (C++, WinAPI). Он не пользуется преимуществами CLR, но может предоставлять доступ к низкоуровневым ресурсам, таким как работа с памятью или устройствами.

3. Что такое CLR?
CLR (Common Language Runtime) — это виртуальная машина .NET, которая отвечает за выполнение программы. Она обеспечивает:
Компиляцию MSIL (Microsoft Intermediate Language) в машинный код.
Управление памятью через сборщик мусора (GC).
Проверку типов во время выполнения.
Обеспечение безопасности кода.

4. Что такое коллекция? Какие типы коллекций вы знаете в C#?
Коллекция — это объект, хранящий множество элементов одного или разных типов. В C# существуют различные типы коллекций:
List<T> — динамический массив.
Dictionary<TKey, TValue> — коллекция пар "ключ-значение".
HashSet<T> — коллекция уникальных элементов.
Queue<T> — очередь (FIFO).
Stack<T> — стек (LIFO).
LinkedList<T> — двусвязный список.

5. Что такое исключение? Как обработать исключение в C#?
Исключение — это событие, которое возникает во время выполнения программы и указывает на ошибку или аномальную ситуацию. В C# исключения обрабатываются с помощью блоков try-catch-finally. Пример обработки:
csharp
Копировать
1
2
3
4
5
6
7
8
9
10
11
12
try
{
    // Код, который может вызвать исключение
}
catch (Exception ex)
{
    // Обработка исключения
}
finally
{
    // Код, который всегда выполняется
}

6. Опишите конструкцию try-catch-finally, что вы о ней знаете.
try — блок, содержащий код, который может вызвать исключение.
catch — блок, обрабатывающий конкретное исключение или его базовый тип.
finally — блок, который выполняется независимо от того, было ли выброшено исключение или нет. Используется для освобождения ресурсов.

7. Если сделать return из catch, выполнится ли finally?
Да, блок finally выполнится даже если в блоке catch происходит return. Это гарантируется языком C# для обеспечения корректного освобождения ресурсов.

8. Перечислите SOLID принципы.
SOLID — набор основополагающих принципов объектно-ориентированного дизайна:
S ingle Responsibility Principle (Принцип единственной ответственности).
O pen/Closed Principle (Принцип открытости/закрытости).
L iskov Substitution Principle (Принцип подстановки Барбары Лисков).
I nterface Segregation Principle (Принцип разделения интерфейсов).
D ependency Inversion Principle (Принцип инверсии зависимостей).

9. Что такое статический класс? В чем его особенности?
Статический класс — это класс, который нельзя инстанцировать (new). Все его члены автоматически становятся статическими. Особенности:
Не имеет конструктора экземпляра.
Автоматически загружается в память при первом обращении.
Нельзя унаследовать от него.

10. В чем отличие delegate, Action, Func и Predicate?
delegate — общее понятие делегата, представляющего ссылку на метод.
Action — делегат без возвращаемого значения.
Func — делегат с возвращаемым значением.
Predicate — специализированный делегат, возвращающий bool.

11. Может ли интерфейс объявить событие?
Да, интерфейс может объявить событие, но реализация должна быть выполнена в классе, реализующем этот интерфейс.

12. Для чего в .NET используется конструкция using(…){…}, и во что она разворачивается?
using используется для автоматического вызова метода Dispose() у объектов, реализующих интерфейс IDisposable. Эта конструкция разворачивается в следующий код:
csharp
Копировать
1
2
3
4
5
6
7
8
9
10
IDisposable resource = new SomeDisposableObject();
try
{
    // Использование ресурса
}
finally
{
    if (resource != null)
        resource.Dispose();
}

13. Синхронизация потоков, какие виды блокировок вы знаете.
Основные виды блокировок:
lock — мониторная блокировка.
Monitor — более гибкий аналог lock.
Mutex — системная блокировка, работает между процессами.
Semaphore — ограничивает количество одновременно работающих потоков.
ReaderWriterLockSlim — блокировка для чтения/записи.

14. Коротко опишите алгоритм работы сборщика мусора?
GC периодически проверяет все объекты в управляемой куче, чтобы найти те, на которые больше нет активных ссылок. Такие объекты помечаются как "недоступные" и их память освобождается. После этого происходит компактификация памяти для уменьшения фрагментации.

15. Сколько существует поколений в GC?
В GC существует три поколения:
0 — недавно созданные объекты.
1 — объекты, пережившие одну проверку GC.
2 — долгоживущие объекты.

16. Перечислите ограничения обобщенных типов и их назначение.
Ограничения:
where T : class — только ссылочные типы.
where T : struct — только типы значений.
where T : new() — наличие параметризованного конструктора.
where T : <interface> — реализация указанного интерфейса.
Назначение: обеспечивают безопасность типов и возможность использования конкретных функциональностей.

17. Отличаются ли IEnumerable<T> и IQueryable<T>? Если да, в чем отличие?
IEnumerable<T> — работает в памяти, использует LINQ to Objects.
IQueryable<T> — работает с удаленными источниками данных (например, базы данных), использует LINQ to SQL или EF.

18. Отличаются ли Object.GetType() и typeof()? Если да, в чем отличие?
GetType() — возвращает тип текущего объекта во время выполнения.
typeof() — возвращает тип по имени во время компиляции.

19. Можно ли реализовать в одном классе два интерфейса описывающих методы с одинаковой сигнатурой.
Да, можно. Но нужно использовать явную реализацию интерфейсов для различения методов.

20. Отличаются ли Асинхронность и Параллельность? Если да, в чем отличие?
Асинхронность — выполнение задачи без блокировки потока (например, ожидание ввода/вывода).
Параллельность — одновременное выполнение нескольких задач на разных потоках.